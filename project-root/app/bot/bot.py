import logging
import asyncio
from aiogram import Bot, Dispatcher, html
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
import httpx
from app.core.scheduler import start_scheduler  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º start_scheduler

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
API_TOKEN = '8093417419:AAGNe6AbUuFzEin_86wuE0Z_4eJ0MQwSrUY'

# URL –≤–∞—à–µ–≥–æ API
API_URL = "http://127.0.0.1:8000/api/v1/products"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
kd_list = [[KeyboardButton(text="üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É")]]
# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
keyboard = ReplyKeyboardMarkup(
    keyboard=kd_list,  # Correct list of lists initialization
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö Wildberries.\n\n–ù–∞–∂–º–∏—Ç–µ 'üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
@dp.message(lambda message: message.text == "üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É")
async def ask_artikul(message: Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
@dp.message(lambda message: message.text.isdigit())  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def get_product_data(message: Message):
    artikul = message.text

    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É API
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(API_URL, json={"artikul": artikul})
            if response.status_code == 200:
                product = response.json().get("product", {})
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
                if product:
                    reply = (
                        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"üÜî –ê—Ä—Ç–∏–∫—É–ª: {product.get('artikul', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"üí∞ –¶–µ–Ω–∞: {product.get('price', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Ä—É–±.\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product.get('rating', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö: {product.get('total_quantity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    )
                else:
                    reply = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä —Å —ç—Ç–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º."
            else:
                reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.json().get('detail', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.')}"

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}"

    await message.reply(reply)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo(message: Message):
    await message.reply("–Ø –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def start_bot():
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await start_scheduler()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
if __name__ == '__main__':
    asyncio.run(start_bot())
